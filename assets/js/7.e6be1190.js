(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1292:function(s,t,a){"use strict";a.r(t);var e=a(3),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("本文为学习刘龙彬老师Git和阮一峰常用Git命令的学习笔记，适合查阅新手学习。")]),s._v(" "),e("p",[e("strong",[s._v("git")])]),s._v(" "),e("p",[s._v("[TOC]")]),s._v(" "),e("hr"),s._v(" "),e("ol",[e("li",[s._v("起步")]),s._v(" "),e("li",[s._v("Git 基础")]),s._v(" "),e("li",[s._v("Github")]),s._v(" "),e("li",[s._v("Git 分支")])]),s._v(" "),e("p",[s._v("git官网：https://git.p2hp.com/")]),s._v(" "),e("h2",{attrs:{id:"起步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[s._v("#")]),s._v(" 起步")]),s._v(" "),e("h3",{attrs:{id:"于版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#于版本控制"}},[s._v("#")]),s._v(" 于版本控制")]),s._v(" "),e("h4",{attrs:{id:"文件的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件的版本"}},[s._v("#")]),s._v(" 文件的版本")]),s._v(" "),e("p",[s._v("文件管理会出现下面这种情况")]),s._v(" "),e("blockquote",[e("p",[s._v("XXX设计稿.doc\nXX设计稿.doc\nXXXXX设计稿.doc\n修改6版.doc\n修改20版.doc\n最后次修改版.doc\n再也不该版本.doc\n。。。")])]),s._v(" "),e("h4",{attrs:{id:"版本控制软件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本控制软件"}},[s._v("#")]),s._v(" 版本控制软件")]),s._v(" "),e("p",[s._v("概念：")]),s._v(" "),e("p",[s._v("版本控制软件是一个用来记录文件变化，以便将来查阅特定 版本修订情况的系统，因此有时也叫做“版本控制系统”。")]),s._v(" "),e("p",[s._v("通俗的理解：")]),s._v(" "),e("p",[s._v("把手工管理文件版本的方式，改为由软件管理文件的版本； 这个负责管理文件版本的软件，叫做“版本控制软件”。")]),s._v(" "),e("h4",{attrs:{id:"使用版本控制软件的好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用版本控制软件的好处"}},[s._v("#")]),s._v(" 使用版本控制软件的好处")]),s._v(" "),e("blockquote",[e("ul",[e("li",[e("code",[s._v("操作简便")]),s._v("： 只需识记几组简单的终端命令，即可快速上手常见的版本控制软件")]),s._v(" "),e("li",[e("code",[s._v("易于对比")]),s._v("： 基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因")]),s._v(" "),e("li",[e("code",[s._v("易于回溯")]),s._v("： 可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态")]),s._v(" "),e("li",[e("code",[s._v("不易丢失")]),s._v("： 在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来")]),s._v(" "),e("li",[e("code",[s._v("协作方便")]),s._v("： 基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作")])])]),s._v(" "),e("h4",{attrs:{id:"版本控制系统的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本控制系统的分类"}},[s._v("#")]),s._v(" 版本控制系统的分类")]),s._v(" "),e("p",[s._v("发展历史顺序")]),s._v(" "),e("blockquote",[e("ol",[e("li",[s._v("本地版本控制系统："),e("code",[s._v("单机运行")]),s._v("，使维护文件版本的操作工具")]),s._v(" "),e("li",[s._v("集中化的版本控制系统： 联网运行，支持多人协作开发；"),e("code",[s._v("性能差、用户体验不好")])]),s._v(" "),e("li",[s._v("分布式版本控制系统： 联网运行，支持多人协作开发；性能优秀、用户体验好")])])]),s._v(" "),e("h5",{attrs:{id:"本地版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地版本控制系统"}},[s._v("#")]),s._v(" "),e("code",[s._v("本地")]),s._v("版本控制系统")]),s._v(" "),e("p",[e("img",{attrs:{src:a(892),alt:"img"}})]),s._v(" "),e("blockquote",[e("p",[s._v("特点： 使用软件来记录文件的不同版本，提高了工作效率， 降低了手动维护版")]),s._v(" "),e("p",[s._v("本的出错率缺点：")]),s._v(" "),e("p",[s._v("① "),e("code",[s._v("单机运行，不支持多人协作开发")])]),s._v(" "),e("p",[s._v("② 版本数据库故障后，所有历史更新记录会丢失")])]),s._v(" "),e("h5",{attrs:{id:"集中化的版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集中化的版本控制系统"}},[s._v("#")]),s._v(" "),e("code",[s._v("集中化")]),s._v("的版本控制系统")]),s._v(" "),e("p",[e("img",{attrs:{src:a(893),alt:"img"}})]),s._v(" "),e("blockquote",[e("p",[s._v("特点：基于"),e("code",[s._v("服务器、客户端")]),s._v("的运行模式\n① 服务器保存文件的所有更新记录\n② 客户端"),e("code",[s._v("只保留最新的文件版本")])]),s._v(" "),e("p",[s._v("优点：联网运行，支持多人协作开发")]),s._v(" "),e("p",[s._v("缺点：\n① 不支持离线提交版本更新\n② 中心服务器崩溃后，所有人无法正常工作\n③ 版本数据库故障后，所有历史更新记录会丢失")]),s._v(" "),e("p",[e("code",[s._v("典型代表：SVN")])])]),s._v(" "),e("h5",{attrs:{id:"分布式版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制系统"}},[s._v("#")]),s._v(" "),e("code",[s._v("分布式")]),s._v("版本控制系统")]),s._v(" "),e("p",[e("img",{attrs:{src:a(823),alt:"img"}})]),s._v(" "),e("blockquote",[e("p",[s._v("特点：基于"),e("code",[s._v("服务器、客户端")]),s._v("的运行模式")]),s._v(" "),e("ol",[e("li",[s._v("服务器保存文件的所有更新版本")]),s._v(" "),e("li",[e("code",[s._v("客户端是服务器的完整备份")]),s._v("，并不是只保留文件的最新版本")])]),s._v(" "),e("p",[s._v("优点：\n① 联网运行，支持多人协作开发\n② 客户端"),e("code",[s._v("断网后支持离线本地提交版本更新")]),s._v("\n③ 服务器故障或损坏后，可使用任何一个客户端的备份进行恢复")]),s._v(" "),e("p",[e("code",[s._v("典型代表：Git")])])]),s._v(" "),e("h3",{attrs:{id:"git-基础概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-基础概念"}},[s._v("#")]),s._v(" Git 基础概念")]),s._v(" "),e("h4",{attrs:{id:"什么是-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-git"}},[s._v("#")]),s._v(" 什么是 Git")]),s._v(" "),e("p",[s._v("Git 是一个"),e("code",[s._v("开源的分布式版本控制系统")]),s._v("，是"),e("code",[s._v("目前世界上最先进、最流行")]),s._v("的版本控制系统。可以快速高效地处理 从很小到非常大的项目版本管理。")]),s._v(" "),e("p",[s._v("特点："),e("code",[s._v("项目越大越复杂")]),s._v("，协同开发者越多，越能体现出 Git 的"),e("code",[s._v("高性能和高可用性")]),s._v("！")]),s._v(" "),e("h4",{attrs:{id:"git-的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的特性"}},[s._v("#")]),s._v(" Git 的特性")]),s._v(" "),e("p",[s._v("Git 之所以快速和高效，主要依赖于它的如下两个特性：")]),s._v(" "),e("p",[s._v("① 直接记录快照，而非差异比较")]),s._v(" "),e("p",[s._v("② 近乎所有操作都是本地执行")]),s._v(" "),e("h5",{attrs:{id:"svn-的差异比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#svn-的差异比较"}},[s._v("#")]),s._v(" SVN 的差异比较")]),s._v(" "),e("p",[s._v("传统的版本控制系统（例如 SVN）是"),e("code",[s._v("基于差异")]),s._v("的版本控制，它们存储的是一组基本文件和每个文件随时间逐步 累积的差异。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(894),alt:"image-20230918170722262"}})]),s._v(" "),e("blockquote",[e("p",[s._v("好处：节省磁盘空间")]),s._v(" "),e("p",[s._v("缺点："),e("code",[s._v("耗时、效率低")]),s._v(" 在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件")])]),s._v(" "),e("h5",{attrs:{id:"git-的记录快照"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的记录快照"}},[s._v("#")]),s._v(" Git 的记录快照")]),s._v(" "),e("p",[s._v("Git "),e("code",[s._v("快照")]),s._v("是在原有文件版本的基础上重新生成一份新的文件，"),e("code",[s._v("类似于备份")]),s._v("。为了效率，如果文件没有修改，Git  不再重新存储该文件，而是只保留一个链接指向之前存储的文件。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(895),alt:"image-20230918170830569"}})]),s._v(" "),e("p",[s._v("缺点：占用磁盘空间较大")]),s._v(" "),e("p",[s._v("优点："),e("code",[s._v("版本切换时非常快")]),s._v("，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。")]),s._v(" "),e("p",[s._v("特点："),e("code",[s._v("空间换时间")])]),s._v(" "),e("h5",{attrs:{id:"近乎所有操作都是本地执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#近乎所有操作都是本地执行"}},[s._v("#")]),s._v(" 近乎所有操作都是本地执行")]),s._v(" "),e("p",[e("img",{attrs:{src:a(823),alt:"img"}})]),s._v(" "),e("p",[s._v("在 Git 中的"),e("code",[s._v("绝大多数操作都只需要访问本地文件和资源")]),s._v("，一般不 需要来自网络上其它计算机的信息。")]),s._v(" "),e("p",[s._v("特性：")]),s._v(" "),e("p",[s._v("① 断网后依旧可以在本地对项目进行版本管理")]),s._v(" "),e("p",[s._v("② 联网后，把本地修改的记录同步到云端服务器即可")]),s._v(" "),e("h3",{attrs:{id:"git-中的三个区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-中的三个区域"}},[s._v("#")]),s._v(" Git 中的三个区域")]),s._v(" "),e("p",[s._v("使用 Git 管理的项目，拥有三个区域")]),s._v(" "),e("p",[s._v("分别是："),e("code",[s._v("工作区")]),s._v("、"),e("code",[s._v("暂存区")]),s._v("、"),e("code",[s._v("Git 仓库")])]),s._v(" "),e("blockquote",[e("p",[s._v("工作区： 处理工作的区域")]),s._v(" "),e("p",[s._v("暂存区： 已完成的工作的临时存放区域， 等待被提交")]),s._v(" "),e("p",[s._v("Git 仓库： 最终的存放区域")])]),s._v(" "),e("h3",{attrs:{id:"git-中的三种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-中的三种状态"}},[s._v("#")]),s._v(" Git 中的三种状态")]),s._v(" "),e("p",[e("img",{attrs:{src:a(896),alt:"image-20230918180240430"}})]),s._v(" "),e("blockquote",[e("p",[s._v("注意：")]),s._v(" "),e("ul",[e("li",[s._v("工作区的文件被修改了，但还没有放到暂存区，就是"),e("code",[s._v("已修改")]),s._v("状态。")]),s._v(" "),e("li",[s._v("如果文件已修改并放入暂存区，就属于"),e("code",[s._v("已暂存")]),s._v("状态。")]),s._v(" "),e("li",[s._v("如果 Git 仓库中保存着特定版本的文件，就属于"),e("code",[s._v("已提交")]),s._v("状态")])])]),s._v(" "),e("h3",{attrs:{id:"基本的-git-工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本的-git-工作流程"}},[s._v("#")]),s._v(" 基本的 Git 工作流程")]),s._v(" "),e("p",[e("img",{attrs:{src:a(897),alt:"image-20230918180412227"}})]),s._v(" "),e("blockquote",[e("p",[s._v("基本的 Git 工作流程如下：")]),s._v(" "),e("p",[s._v("① 在工作区中修改文件")]),s._v(" "),e("p",[s._v("② 将你想要下次提交的更改进行暂存")]),s._v(" "),e("p",[s._v("③ 提交更新，找到暂存区的文件，将快照永久性 存储到 Git 仓库")])]),s._v(" "),e("h2",{attrs:{id:"git-基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[s._v("#")]),s._v(" Git 基础")]),s._v(" "),e("h3",{attrs:{id:"安装并配置-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装并配置-git"}},[s._v("#")]),s._v(" 安装并配置 Git")]),s._v(" "),e("h4",{attrs:{id:"在-windows-中下载并安装-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-windows-中下载并安装-git"}},[s._v("#")]),s._v(" 在 Windows 中下载并安装 Git")]),s._v(" "),e("p",[s._v("在开始使用 Git 管理项目的版本之前，需要将它安装到计算机上。可以使用浏览器访问如下的网址，根据自己 的操作系统，选择下载对应的 Git 安装包：]")]),s._v(" "),e("p",[s._v("https://git-scm.com/downloads")]),s._v(" "),e("h4",{attrs:{id:"配置用户信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置用户信息"}},[s._v("#")]),s._v(" 配置用户信息")]),s._v(" "),e("p",[s._v("安装完 Git 之后，要做的第一件事就是设置自己的"),e("code",[s._v("用户名")]),s._v("和"),e("code",[s._v("邮件地址")]),s._v("。因为通过 Git 对项目进行版本管理的时候，Git 需要使用这些基本信息，来记录是谁对项目进行了操作：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name”\ngit config --global user.email "')]),s._v('xxx@qq.com"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("blockquote",[e("p",[s._v("注意：如果使用了 "),e("code",[s._v("--global")]),s._v(" 选项，那么该命令只需要运行一次，即可永久生效")])]),s._v(" "),e("h4",{attrs:{id:"git-的全局配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的全局配置文件"}},[s._v("#")]),s._v(" Git 的全局配置文件")]),s._v(" "),e("p",[s._v("通过 "),e("code",[s._v("git config --global user.name")]),s._v(" 和 "),e("code",[s._v("git config --global user.email")]),s._v(" 配置的用户名和邮箱地址，会被写 入到 "),e("code",[s._v("C:/Users/用户名文件夹/.gitconfig")]),s._v(" 文件中。这个文件是 Git 的"),e("code",[s._v("全局配置文件，配置一次即可永久生效")]),s._v("。")]),s._v(" "),e("p",[s._v("可以使用记事本打开此文件，从而查看自己曾经对 Git 做了哪些全局性的配置")]),s._v(" "),e("h4",{attrs:{id:"检查配置信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检查配置信息"}},[s._v("#")]),s._v(" 检查配置信息")]),s._v(" "),e("p",[s._v("除了使用记事本查看全局的配置信息之外，还可以运行如下的终端命令，快速的查看 Git 的全局配置信息：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有的全局配置项")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --list --global\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看指定的全局配置项")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.email\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h4",{attrs:{id:"获取帮助信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取帮助信息"}},[s._v("#")]),s._v(" 获取帮助信息")]),s._v(" "),e("p",[s._v("可以使用 git help  命令，无需联网即可在浏览器中打开帮助手册，例如：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#要想打开git config 命令的帮助手册")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" config \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如果不想查看完整的手册，那么可以用 -h 选项获得更简明的“help”输出：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#想要获取git config 命令的快速参考")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config -h\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"git-的基本操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的基本操作"}},[s._v("#")]),s._v(" Git 的基本操作")]),s._v(" "),e("h4",{attrs:{id:"获取-git-仓库的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库的两种方式"}},[s._v("#")]),s._v(" 获取 Git 仓库的两种方式")]),s._v(" "),e("p",[s._v("① 将尚未进行版本控制的本地目录转换为 Git 仓库")]),s._v(" "),e("p",[s._v("② 从其它服务器"),e("code",[s._v("克隆")]),s._v("一个已存在的 Git 仓库 以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库")]),s._v(" "),e("p",[s._v("以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库")]),s._v(" "),e("h4",{attrs:{id:"在现有目录中初始化仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在现有目录中初始化仓库"}},[s._v("#")]),s._v(" 在现有目录中初始化仓库")]),s._v(" "),e("p",[s._v("如果自己有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，需要执行如下两个步骤：")]),s._v(" "),e("p",[s._v("① 在项目目录中，通过鼠标右键打开“Git Bash”")]),s._v(" "),e("p",[s._v("② 执行 "),e("code",[s._v("git init")]),s._v(" 命令将当前的目录转化为 Git 仓库")]),s._v(" "),e("p",[e("code",[s._v("git init")]),s._v(" 命令会创建一个名为 "),e("code",[s._v(".git")]),s._v(" 的隐藏目录，这个 "),e("code",[s._v(".git 目录就是当前项目的 Git 仓库")]),s._v("，里面包含了初始的必要 文件，这些文件是 Git 仓库的"),e("code",[s._v("必要组成部分")]),s._v("。")]),s._v(" "),e("h4",{attrs:{id:"工作区中文件的-4-种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区中文件的-4-种状态"}},[s._v("#")]),s._v(" 工作区中文件的 4 种状态")]),s._v(" "),e("p",[s._v("工作区中的每一个文件可能有 4 种状态，这四种状态共分为两大类")]),s._v(" "),e("p",[e("img",{attrs:{src:a(898),alt:"image-20230918181336413"}})]),s._v(" "),e("p",[s._v("Git 操作的终极结果：让工作区中的文件都处于“"),e("code",[s._v("未修改")]),s._v("”的状态。")]),s._v(" "),e("h4",{attrs:{id:"检查文件的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检查文件的状态"}},[s._v("#")]),s._v(" 检查文件的状态")]),s._v(" "),e("p",[s._v("可以使用 git status 命令查看文件处于什么状态，")]),s._v(" "),e("p",[e("img",{attrs:{src:a(899),alt:"image-20230918181434554"}})]),s._v(" "),e("p",[s._v("在状态报告中可以看到新建的 "),e("code",[s._v("index.html")]),s._v(" 文件出现在 "),e("code",[s._v("Untracked files")]),s._v("（未跟踪的文件） 下面。 未跟踪的文件意味着 "),e("code",[s._v("Git 在之前的快照（提交）中没有这些文件")]),s._v("；Git 不会自动将之纳入跟踪范围，除非明确 地告诉它“我需要使用 Git 跟踪管理该文件”")]),s._v(" "),e("h4",{attrs:{id:"以精简的方式显示文件状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以精简的方式显示文件状态"}},[s._v("#")]),s._v(" 以精简的方式显示文件状态")]),s._v(" "),e("p",[s._v("使用 "),e("code",[s._v("git status")]),s._v(" 输出的状态报告很详细，但有些繁琐。如果希望"),e("code",[s._v("以精简的方式显示文件")]),s._v("的状态，可以使用如下 两条完全等价的命令，其中 "),e("code",[s._v("-s 是 --short 的简写形式")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#以精简的方式显示文件状态")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status -s\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status --short\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("未跟踪文件前面有红色的 ?? 标记，例如：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(900),alt:"image-20230918181651300"}})]),s._v(" "),e("h4",{attrs:{id:"跟踪新文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跟踪新文件"}},[s._v("#")]),s._v(" 跟踪新文件")]),s._v(" "),e("p",[s._v("使用命令 git add 开始跟踪一个文件。 所以，要跟踪 index.html 文件，运行如下的命令即可：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" index.html\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("此时再运行 "),e("code",[s._v("git status")]),s._v(" 命令，会看到 index.html 文件在 "),e("code",[s._v("Changes to be committed")]),s._v(" 这行的下面，说明已被 跟踪，并处于暂存状态：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(901),alt:"image-20230918181813635"}})]),s._v(" "),e("p",[e("img",{attrs:{src:a(902),alt:"image-20230918181824022"}})]),s._v(" "),e("p",[s._v("以精简的方式显示文件的状态： 新添加到暂存区中的文件前面有绿色的 A 标记")]),s._v(" "),e("h4",{attrs:{id:"提交更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交更新"}},[s._v("#")]),s._v(" 提交更新")]),s._v(" "),e("p",[s._v("现在暂存区中有一个 index.html 文件等待被提交到 Git 仓库中进行保存。可以执行 git commit 命令进行提交, 其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"新建了index.html文件"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("提交成功之后，会显示如下的信息：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(903),alt:"image-20230918181932778"}})]),s._v(" "),e("p",[s._v("提交成功之后，再次检查文件的状态，得到提示如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(904),alt:"image-20230918182238504"}})]),s._v(" "),e("p",[s._v("证明工作区中所有的文件都处于“"),e("code",[s._v("未修改")]),s._v("”的状态，"),e("code",[s._v("没有任何文件需要被提交")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(905),alt:"image-20230918182311296"}})]),s._v(" "),e("h4",{attrs:{id:"对已提交的文件进行修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对已提交的文件进行修改"}},[s._v("#")]),s._v(" 对已提交的文件进行修改")]),s._v(" "),e("p",[s._v("目前，index.html 文件"),e("code",[s._v("已经被 Git 跟踪")]),s._v("，并且"),e("code",[s._v("工作区和 Git 仓库")]),s._v("中的 index.html 文件内容保持一致。当我们 修改了工作区中 index.html 的内容之后，再次运行 "),e("code",[s._v("git status")]),s._v(" 和 "),e("code",[s._v("git status -s")]),s._v(" 命令，会看到如下的内容：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(906),alt:"image-20230918182353858"}})]),s._v(" "),e("p",[s._v("文件 index.html 出现在 "),e("code",[s._v("Changes not staged for commit")]),s._v(" 这行下面，说明已跟踪文件的内容发生了变化， 但还没有放到暂存区。")]),s._v(" "),e("blockquote",[e("p",[s._v("注意：修改过的、没有放入暂存区的文件前面有"),e("code",[s._v("红色的 M")]),s._v(" 标记")])]),s._v(" "),e("h4",{attrs:{id:"暂存已修改的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存已修改的文件"}},[s._v("#")]),s._v(" 暂存已修改的文件")]),s._v(" "),e("p",[s._v("目前，工作区中的 index.html 文件已被修改，如果要暂存这次修改，需要再次运行 git add 命令，这个命令 是个多功能的命令，")]),s._v(" "),e("p",[s._v("主要有如下 3 个功效：")]),s._v(" "),e("p",[s._v("① 可以用它开始跟踪新文件")]),s._v(" "),e("p",[s._v("② 把已跟踪的、且已修改的文件放到暂存区")]),s._v(" "),e("p",[s._v("③ 把有冲突的文件标记为已解决状态")]),s._v(" "),e("p",[e("img",{attrs:{src:a(907),alt:"image-20230918182528182"}})]),s._v(" "),e("h4",{attrs:{id:"提交已暂存的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交已暂存的文件"}},[s._v("#")]),s._v(" 提交已暂存的文件")]),s._v(" "),e("p",[s._v("再次运行 "),e("code",[s._v('git commit -m "提交消息"')]),s._v(" 命令，即可将暂存区中记录的 index.html 的快照，提交到 Git 仓库中进 行保存：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(908),alt:"image-20230918182712980"}})]),s._v(" "),e("h4",{attrs:{id:"撤销对文件的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销对文件的修改"}},[s._v("#")]),s._v(" 撤销对文件的修改")]),s._v(" "),e("p",[s._v("撤销对文件的修改指的是：把对工作区中对应文件的修改，"),e("code",[s._v("还原")]),s._v("成 Git 仓库中所保存的版本。 操作的结果：所有的修改会丢失，且无法恢复！"),e("code",[s._v("危险性比较高，请慎重操作")]),s._v("！")]),s._v(" "),e("p",[e("img",{attrs:{src:a(909),alt:"image-20230918182801798"}})]),s._v(" "),e("blockquote",[e("p",[s._v("撤销操作的本质：用 Git 仓库中保存的文件，覆盖工作区中指定的文件。")])]),s._v(" "),e("h4",{attrs:{id:"向暂存区中一次性添加多个文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向暂存区中一次性添加多个文件"}},[s._v("#")]),s._v(" 向暂存区中一次性添加多个文件")]),s._v(" "),e("p",[s._v("如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区")])]),s._v(" "),e("h4",{attrs:{id:"取消暂存的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取消暂存的文件"}},[s._v("#")]),s._v(" 取消暂存的文件")]),s._v(" "),e("p",[s._v("如果需要从暂存区中移除对应的文件，可以使用如下的命令:")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset HEAD 要移除的文件名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h4",{attrs:{id:"跳过使用暂存区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跳过使用暂存区域"}},[s._v("#")]),s._v(" 跳过使用暂存区域")]),s._v(" "),e("p",[s._v("Git 标准的工作流程是"),e("code",[s._v("工作区 → 暂存区 → Git 仓库")]),s._v("，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将 工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了"),e("code",[s._v("工作区 → Git 仓库")]),s._v("。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 "),e("code",[s._v("git commit 加上 -a")]),s._v(" 选项，Git 就会自动把 所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(' commit -a -m "描述消息”\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h4",{attrs:{id:"移除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[s._v("#")]),s._v(" 移除文件")]),s._v(" "),e("p",[s._v("从 Git 仓库中移除文件的方式有两种：")]),s._v(" "),e("p",[s._v("① 从 Git 仓库和工作区中"),e("code",[s._v("同时移除")]),s._v("对应的文件")]),s._v(" "),e("p",[s._v("② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#从Git仓库和工作区中同时移除index.js 文件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f index.js\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#只从Git仓库中移除index.css, 但保留工作区中的index.css 文件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" --cached index.CsS\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[s._v("#")]),s._v(" 忽略文件")]),s._v(" "),e("p",[s._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可 以创建一个名为 "),e("code",[s._v(".gitignore")]),s._v(" 的配置文件，列出要忽略的文件的匹配模式。 文件 .gitignore 的格式规范如下：")]),s._v(" "),e("p",[s._v("① 以 # 开头的是注释")]),s._v(" "),e("p",[s._v("② 以 / 结尾的是目录")]),s._v(" "),e("p",[s._v("③ 以 / 开头防止递归")]),s._v(" "),e("p",[s._v("④ 以 ! 开头表示取反")]),s._v(" "),e("p",[s._v("⑤ 可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）")]),s._v(" "),e("h4",{attrs:{id:"glob-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#glob-模式"}},[s._v("#")]),s._v(" glob 模式")]),s._v(" "),e("p",[s._v("所谓的 glob 模式是指简化了的正则表达式：")]),s._v(" "),e("p",[s._v("① 星号 * 匹配零个或多个任意字符")]),s._v(" "),e("p",[s._v("② [abc] 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）")]),s._v(" "),e("p",[s._v("③ 问号 ? 只匹配一个任意字符")]),s._v(" "),e("p",[s._v("④ 在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配 所有 0 到 9 的数字）")]),s._v(" "),e("p",[s._v("⑤ 两个星号 ** 表示匹配任意中间目录（比如 a/**/z 可以匹配 a/z 、a/b/z 或 a/b/c/z 等）")]),s._v(" "),e("h4",{attrs:{id:"gitignore-文件的例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-文件的例子"}},[s._v("#")]),s._v(" .gitignore 文件的例子")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略所有的.a文件")]),s._v("\n*.a\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 但跟踪所有的lib.a, 即便你在前面忽略了.a文件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("lib.a\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只忽略当前目录下的TODO 文件，而不忽略subdir/TODO")]),s._v("\n/TODO\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略任何目录下名为build 的文件夹")]),s._v("\nbuild/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略doc/notes. txt,但不忽略doc/server /arch. txt")]),s._v("\ndoc/*.txt\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 忽略 doc/目录及其所有子目录下的.pdf文件")]),s._v("\ndoc/**/*.pdf\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h4",{attrs:{id:"查看提交历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[s._v("#")]),s._v(" 查看提交历史")]),s._v(" "),e("p",[s._v("如果希望回顾项目的提交历史，可以使用 git log 这个简单且有效的命令")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按时间先后顺序列出所有的提交历史，最近的提交排在最上面")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只展示最新的两条提交历史，数字可以按需进行填写")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log -2\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在一行上展示最近两条提交历史的信息")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log -2 --pretty"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("oneline\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在一行上展示最近两条提交历史的信息，并自定义输出的格式")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# %h提交的简写哈希值%an作者名字%ar作者修订日期， 按多久以前的方式显示%s提交说明")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log -2 --pretty"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("format:"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%h| %an| %ar| %s"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h4",{attrs:{id:"回退到指定的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回退到指定的版本"}},[s._v("#")]),s._v(" 回退到指定的版本")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在一行上展示所有的提交历史")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --pretty"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("oneline\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使用git reset --hard命令，根据指定的提交ID回退到指定版本")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("CommitID"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在旧版本中使用git reflog --pretty=oneline 命令，查看命令操作的历史")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reflog --pret "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ty")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("oneline\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#再次根据最新的提交ID,跳转到最新的版本")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("CommitID"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("① 初始化 Git 仓库的命令")]),s._v(" "),e("ul",[e("li",[s._v("git init")])]),s._v(" "),e("p",[s._v("② 查看文件状态的命令")]),s._v(" "),e("ul",[e("li",[s._v("git status 或 git status -s")])]),s._v(" "),e("p",[s._v("③ 一次性将文件加入暂存区的命令")]),s._v(" "),e("ul",[e("li",[s._v("git add .")])]),s._v(" "),e("p",[s._v("④ 将暂存区的文件提交到 Git 仓库的命令")]),s._v(" "),e("ul",[e("li",[s._v('git commit -m "提交消息"')])]),s._v(" "),e("h2",{attrs:{id:"github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[s._v("#")]),s._v(" Github")]),s._v(" "),e("h3",{attrs:{id:"了解开源相关的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#了解开源相关的概念"}},[s._v("#")]),s._v(" 了解开源相关的概念")]),s._v(" "),e("h4",{attrs:{id:"什么是开源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是开源"}},[s._v("#")]),s._v(" 什么是开源")]),s._v(" "),e("p",[e("img",{attrs:{src:a(910),alt:"image-20230918183847749"}})]),s._v(" "),e("h4",{attrs:{id:"什么是开源许可协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是开源许可协议"}},[s._v("#")]),s._v(" 什么是开源许可协议")]),s._v(" "),e("p",[s._v("开源并不意味着完全没有限制，为了限制使用者的使用范围和保护作者的权利，每个开源项目都应该遵守开源 许可协议（ Open Source License ）。")]),s._v(" "),e("h4",{attrs:{id:"常见的-5-种开源许可协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的-5-种开源许可协议"}},[s._v("#")]),s._v(" 常见的 5 种开源许可协议")]),s._v(" "),e("p",[s._v("① BSD（Berkeley Software Distribution）\n② Apache Licence 2.0\n③ GPL（GNU General Public License）")]),s._v(" "),e("ul",[e("li",[s._v("具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售")]),s._v(" "),e("li",[s._v("使用 GPL 的最著名的软件项目是：Linux\n④ LGPL（GNU Lesser General Public License）\n⑤ MIT（Massachusetts Institute of Technology, MIT）")]),s._v(" "),e("li",[s._v("是目前限制最少的协议，唯一的条件：在修改后的代码或者发行包中，必须包含原作者的许可信息")]),s._v(" "),e("li",[s._v("使用 MIT 的软件项目有：jquery、Node.js\n关于更多开源许可协议的介绍，可以参考博客 https://www.runoob.com/w3cnote/open-source-license.html")])]),s._v(" "),e("h4",{attrs:{id:"为什么要拥抱开源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要拥抱开源"}},[s._v("#")]),s._v(" 为什么要拥抱开源")]),s._v(" "),e("p",[s._v("开源的核心思想是“"),e("code",[s._v("我为人人，人人为我")]),s._v("”，人们越来越喜欢开源大致是出于以下 3 个原因：")]),s._v(" "),e("p",[s._v("① 开源给使用者更多的控制权")]),s._v(" "),e("p",[s._v("② 开源让学习变得容易")]),s._v(" "),e("p",[s._v("③ 开源才有真正的安全 开源是软件开发领域的大趋势，拥抱开源就像"),e("code",[s._v("站在了巨人的肩膀上")]),s._v("，不用自己重复造轮子，让开发越来越容易。")]),s._v(" "),e("h4",{attrs:{id:"开源项目托管平台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开源项目托管平台"}},[s._v("#")]),s._v(" 开源项目托管平台")]),s._v(" "),e("p",[s._v("专门用于"),e("code",[s._v("免费存放开源项目源代码的网站")]),s._v("，叫做"),e("code",[s._v("开源项目托管平台")]),s._v("。目前世界上比较出名的开源项目托管平台\n主要有以下 3 个：")]),s._v(" "),e("ul",[e("li",[s._v("Github（全球最牛的开源项目托管平台，没有之一）")]),s._v(" "),e("li",[s._v("Gitlab（对代码私有性支持较好，因此企业用户较多）")]),s._v(" "),e("li",[s._v("Gitee（又叫做"),e("code",[s._v("码云")]),s._v("，是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好）\n注意：以上 3 个开源项目托管平台，只能托管以 Git 管理的项目源代码，因此，它们的名字都以 Git 开头。")])]),s._v(" "),e("h4",{attrs:{id:"什么是-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-github"}},[s._v("#")]),s._v(" 什么是 Github")]),s._v(" "),e("p",[s._v("Github 是全球最大的开源项目托管平台。因为只支持 Git 作为唯一的版本控制工具，故名 GitHub。\n在 Github 中，你可以：\n① 关注自己喜欢的开源项目，为其点赞打 call\n② 为自己喜欢的开源项目做贡献（Pull Request）\n③ 和开源项目的作者讨论 Bug 和提需求 （Issues）\n④ 把喜欢的项目复制一份作为自己的项目进行修改（Fork）\n⑤ 创建属于自己的开源项目\n⑥ etc…")]),s._v(" "),e("blockquote",[e("p",[s._v("Github ≠ Git")])]),s._v(" "),e("h3",{attrs:{id:"注册账号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册账号"}},[s._v("#")]),s._v(" 注册账号")]),s._v(" "),e("h4",{attrs:{id:"注册-github-账号的流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册-github-账号的流程"}},[s._v("#")]),s._v(" 注册 Github 账号的流程")]),s._v(" "),e("p",[s._v("① 访问 Github 的官网首页 https://github.com/\n② 点击“Sign up”按钮跳转到注册页面\n③ 填写可用的用户名、邮箱、密码\n④ 通过点击箭头的形式，将验证图片摆正\n⑤ 点击“Create account”按钮注册新用户\n⑥ 登录到第三步填写的邮箱中，点击激活链接，完成注册")]),s._v(" "),e("h4",{attrs:{id:"激活-github-账号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#激活-github-账号"}},[s._v("#")]),s._v(" 激活 Github 账号")]),s._v(" "),e("p",[s._v("Github 官方会给你发邮件，然后激活就可以了")]),s._v(" "),e("h4",{attrs:{id:"完成注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完成注册"}},[s._v("#")]),s._v(" 完成注册")]),s._v(" "),e("p",[s._v("注册完成后你就有可以在全世界的代码仓库遨游了")]),s._v(" "),e("h3",{attrs:{id:"远程仓库的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的使用"}},[s._v("#")]),s._v(" 远程仓库的使用")]),s._v(" "),e("h4",{attrs:{id:"新建空白远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建空白远程仓库"}},[s._v("#")]),s._v(" 新建空白远程仓库")]),s._v(" "),e("p",[e("img",{attrs:{src:a(911),alt:"image-20230918185433517"}})]),s._v(" "),e("h4",{attrs:{id:"新建空白远程仓库成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建空白远程仓库成功"}},[s._v("#")]),s._v(" 新建空白远程仓库成功")]),s._v(" "),e("p",[e("img",{attrs:{src:a(912),alt:"image-20230918185507517"}})]),s._v(" "),e("h4",{attrs:{id:"远程仓库的两种访问方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的两种访问方式"}},[s._v("#")]),s._v(" 远程仓库的两种访问方式")]),s._v(" "),e("p",[s._v("Github 上的远程仓库，有两种访问方式，分别是 "),e("code",[s._v("HTTPS")]),s._v(" 和 "),e("code",[s._v("SSH")]),s._v("。它们的区别是：\n① HTTPS：零配置；但是每次访问仓库时，需要"),e("code",[s._v("重复输入 Github 的账号和密码才能访问成功")]),s._v("\n② SSH："),e("code",[s._v("需要进行额外的配置")]),s._v("；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码")]),s._v(" "),e("blockquote",[e("p",[s._v("注意：在实际开发中，推荐使用 SSH 的方式访问远程仓库。")])]),s._v(" "),e("h4",{attrs:{id:"基于-https-将本地仓库上传到-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于-https-将本地仓库上传到-github"}},[s._v("#")]),s._v(" 基于 HTTPS 将本地仓库上传到 Github")]),s._v(" "),e("p",[e("img",{attrs:{src:a(913),alt:"image-20230918185645689"}})]),s._v(" "),e("h4",{attrs:{id:"ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-key"}},[s._v("#")]),s._v(" SSH key")]),s._v(" "),e("p",[s._v("SSH key 的作用：实现本地仓库和 Github 之间"),e("code",[s._v("免登录的加密数据传输")]),s._v("。\nSSH key 的好处：免登录身份认证、数据加密传输。\nSSH key 由"),e("code",[s._v("两部分组成")]),s._v("，分别是：\n① id_rsa（私钥文件，存放于客户端的电脑中即可）\n② id_rsa.pub（公钥文件，需要配置到 Github 中）")]),s._v(" "),e("h4",{attrs:{id:"生成-ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-key"}},[s._v("#")]),s._v(" 生成 SSH key")]),s._v(" "),e("p",[s._v("① 打开 Git Bash\n② 粘贴如下的命令，并将 your_email@example.com 替换为注册 Github 账号时填写的邮箱：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ssh-keygen -t rsa -b "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" -C "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your_email@example.com"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("③ 连续敲击 3 次回车，即可在 C:\\Users\\用户名文件夹.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件")]),s._v(" "),e("h4",{attrs:{id:"配置-ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-ssh-key"}},[s._v("#")]),s._v(" 配置 SSH key")]),s._v(" "),e("p",[s._v("① 使用记事本打开 "),e("code",[s._v("id_rsa.pub")]),s._v(" 文件，复制里面的文本内容\n② 在浏览器中登录 Github，"),e("code",[s._v("点击头像 -> Settings -> SSH and GPG Keys -> New SSH key")]),s._v("\n③ 将 id_rsa.pub 文件中的内容，"),e("code",[s._v("粘贴到 Key 对应的文本框中")]),s._v("\n④ 在 Title 文本框中任意填写一个名称，来标识这个 Key 从何而来")]),s._v(" "),e("h4",{attrs:{id:"检测-github-的-ssh-key-是否配置成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检测-github-的-ssh-key-是否配置成功"}},[s._v("#")]),s._v(" 检测 Github 的 SSH key 是否配置成功")]),s._v(" "),e("p",[s._v("打开 Git Bash，输入如下的命令并回车执行：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -T git@github.com\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("上述的命令执行成功后，可能会看到如下的提示消息：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("The authenticity of "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'github.com ( IP ADDRESS)'")]),s._v(" can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWG17E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("continue")]),s._v(" connecting "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("yes/no"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("?\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("输入 yes 之后，如果能看到类似于下面的提示消息，证明 SSH key 已经配置成功了：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("Hi username"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" You've success fully authenticated, but GitHub does not\nprovide shell access ，\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"基于-ssh-将本地仓库上传到-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于-ssh-将本地仓库上传到-github"}},[s._v("#")]),s._v(" 基于 SSH 将本地仓库上传到 Github")]),s._v(" "),e("p",[e("img",{attrs:{src:a(914),alt:"image-20230918190221905"}})]),s._v(" "),e("h4",{attrs:{id:"将远程仓库克隆到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将远程仓库克隆到本地"}},[s._v("#")]),s._v(" 将远程仓库克隆到本地")]),s._v(" "),e("p",[s._v("打开 Git Bash，输入如下的命令并回车执行：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone 远程仓库的地址\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"git-分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-分支"}},[s._v("#")]),s._v(" Git 分支")]),s._v(" "),e("h3",{attrs:{id:"本地分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地分支操作"}},[s._v("#")]),s._v(" 本地分支操作")]),s._v(" "),e("h4",{attrs:{id:"分支的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支的概念"}},[s._v("#")]),s._v(" 分支的概念")]),s._v(" "),e("p",[s._v("分支就是科幻电影里面的"),e("code",[s._v("平行宇宙")]),s._v("，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努 力学习SVN。 如果两个平行宇宙互不干扰，那对现在的你也没啥影响。 不过，"),e("code",[s._v("在某个时间点，两个平行宇宙合并了")]),s._v("，结果，你既学会了Git又学会了SVN！")]),s._v(" "),e("p",[e("img",{attrs:{src:a(915),alt:"image-20230918190349808"}})]),s._v(" "),e("h4",{attrs:{id:"分支在实际开发中的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支在实际开发中的作用"}},[s._v("#")]),s._v(" 分支在实际开发中的作用")]),s._v(" "),e("p",[s._v("在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目 功能的开发，例如：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(916),alt:"image-20230918190450797"}})]),s._v(" "),e("h4",{attrs:{id:"master-主分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#master-主分支"}},[s._v("#")]),s._v(" master 主分支")]),s._v(" "),e("p",[s._v("在初始化本地 Git 仓库的时候，Git 默认已经帮我们创建了一个名字叫做 master 的分支。通常我们把这个 master 分支叫做"),e("code",[s._v("主分支")]),s._v("。")]),s._v(" "),e("p",[e("img",{attrs:{src:a(917),alt:"image-20230918190523101"}})]),s._v(" "),e("p",[s._v("在实际工作中，master 主分支的作用是："),e("code",[s._v("用来保存和记录整个项目已完成的功能代码")]),s._v("。 因此，"),e("strong",[s._v("不允许程序员直接在 master 分支上修改代码")]),s._v("，因为这样做的风险太高，容易导致整个项目崩溃。")]),s._v(" "),e("h4",{attrs:{id:"功能分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能分支"}},[s._v("#")]),s._v(" 功能分支")]),s._v(" "),e("p",[s._v("由于程序员不能直接在 master 分支上进行功能的开发，所以就有了"),e("code",[s._v("功能分支")]),s._v("的概念。")]),s._v(" "),e("p",[e("code",[s._v("功能分支")]),s._v("指的是"),e("code",[s._v("专门用来开发新功能的分支")]),s._v("，它是临时从 master 主分支上分叉出来的，当新功能开发且测试 完毕后，最终需要合并到 master 主分支上，如图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(918),alt:"image-20230918190648339"}})]),s._v(" "),e("h4",{attrs:{id:"查看分支列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看分支列表"}},[s._v("#")]),s._v(" 查看分支列表")]),s._v(" "),e("p",[s._v("使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("运行的结果如下所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(919),alt:"image-20230918190821440"}})]),s._v(" "),e("blockquote",[e("p",[s._v("注意：分支名字前面的 * 号表示当前所处的分支。")])]),s._v(" "),e("h4",{attrs:{id:"创建新分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建新分支"}},[s._v("#")]),s._v(" 创建新分支")]),s._v(" "),e("p",[s._v("使用如下的命令，可以"),e("code",[s._v("基于当前分支，创建一个新的分支")]),s._v("，此时，新分支中的代码和当前分支完全一样：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch 分支名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("图示如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(920),alt:"image-20230918190928472"}})]),s._v(" "),e("h4",{attrs:{id:"切换分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[s._v("#")]),s._v(" 切换分支")]),s._v(" "),e("p",[s._v("使用如下的命令，可以切换到指定的分支上进行开发：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout login\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("图示如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(921),alt:"image-20230918191001762"}})]),s._v(" "),e("h4",{attrs:{id:"分支的快速创建和切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支的快速创建和切换"}},[s._v("#")]),s._v(" 分支的快速创建和切换")]),s._v(" "),e("p",[s._v("使用如下的命令，可以"),e("code",[s._v("创建指定名称的新分支")]),s._v("，并"),e("code",[s._v("立即切换到新分支上")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -b表示创建一个新分支")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# checkout表示切换到刚才新建的分支上")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b 分支名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("img",{attrs:{src:a(922),alt:"image-20230918191143907"}})]),s._v(" "),e("blockquote",[e("p",[s._v('注意： "git checkout -b 分支名称" 是下面 两条命令的简写形式：')]),s._v(" "),e("p",[s._v("① git branch 分支名称")]),s._v(" "),e("p",[s._v("② git checkout 分支名称")])]),s._v(" "),e("h4",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[s._v("#")]),s._v(" 合并分支")]),s._v(" "),e("p",[s._v("功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1.切换到master分支")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2.在master分支上运行git merge命令，将login 分支的代码合并到master分支")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge login\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("图示如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(923),alt:"image-20230918191258914"}})]),s._v(" "),e("blockquote",[e("p",[s._v("合并分支时的注意点： 假设要把 C 分支的代码合并到 A 分支， 则必须先切换到 A 分支上，再运行 git  merge 命令，来合并 C 分支！")])]),s._v(" "),e("h4",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[s._v("#")]),s._v(" 删除分支")]),s._v(" "),e("p",[s._v("当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -d 分支名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("图示如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(924),alt:"image-20230918191329418"}})]),s._v(" "),e("h4",{attrs:{id:"遇到冲突时的分支合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遇到冲突时的分支合并"}},[s._v("#")]),s._v(" 遇到冲突时的分支合并")]),s._v(" "),e("p",[s._v("如果在"),e("code",[s._v("两个不同的分支中")]),s._v("，对"),e("code",[s._v("同一个文件进行了不同的修改")]),s._v("，Git 就没法干净的合并它们。 此时，我们需要打开 这些包含冲突的文件然后"),e("code",[s._v("手动解决冲突")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#假设:在把reg分支合并到master分支期间，代码发生了冲突")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge reg\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#打开包含冲突的文件，手动解决冲突之后，再执行如下的命令")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v('\ngitcommit-m"解决了分支合并冲突的问题”\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"远程分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程分支操作"}},[s._v("#")]),s._v(" 远程分支操作")]),s._v(" "),e("h4",{attrs:{id:"将本地分支推送到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将本地分支推送到远程仓库"}},[s._v("#")]),s._v(" 将本地分支推送到远程仓库")]),s._v(" "),e("p",[s._v("如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -U表示把本地分支和远程分支进行关联，只在第次推送的时候需要带 -U参数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -U 远程仓库的别名 本地分支名称:远程分支名称\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#实际案例:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin payment:pay\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#如果希望远程分支的名称和本地分支名称保持致，可以对 命令进行简化:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -U origin payment \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("blockquote",[e("p",[s._v("注意：第一次推送分支需要带 "),e("code",[s._v("-u")]),s._v(" 参数，此后可以直接使用 "),e("code",[s._v("git push")]),s._v(" 推送代码到远程分支。")])]),s._v(" "),e("h4",{attrs:{id:"查看远程仓库中所有的分支列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看远程仓库中所有的分支列表"}},[s._v("#")]),s._v(" 查看远程仓库中所有的分支列表")]),s._v(" "),e("p",[s._v("通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote show 远程仓库名称\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h4",{attrs:{id:"跟踪分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跟踪分支"}},[s._v("#")]),s._v(" 跟踪分支")]),s._v(" "),e("p",[s._v("跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout 远程分支的名称\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout pay\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b 本地分支名称 远程仓库名称/远程分支名称\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b payment origin/pay\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h4",{attrs:{id:"拉取远程分支的最新的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程分支的最新的代码"}},[s._v("#")]),s._v(" 拉取远程分支的最新的代码")]),s._v(" "),e("p",[s._v("可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码-致")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"删除远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支"}},[s._v("#")]),s._v(" 删除远程分支")]),s._v(" "),e("p",[s._v("可以使用如下的命令，删除远程仓库中指定的分支：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除远程仓库中，指定名称的远程分支")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push 远程仓库名称 --delete 远程分支名称\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin --delete pay\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h4",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("​\t\t① 能够掌握 Git 中基本命令的使用")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("git init")])]),s._v(" "),e("li",[e("p",[s._v("git add .")])]),s._v(" "),e("li",[e("p",[s._v('git commit –m "提交消息"')])]),s._v(" "),e("li",[e("p",[s._v("git status 和 git status -s")]),s._v(" "),e("p",[s._v("② 能够使用 Github 创建和维护远程仓库")])]),s._v(" "),e("li",[e("p",[s._v("能够配置 Github 的 SSH 访问")])]),s._v(" "),e("li",[e("p",[s._v("能够将本地仓库上传到 Github")]),s._v(" "),e("p",[s._v("③ 能够掌握 Git 分支的基本使用")])]),s._v(" "),e("li",[e("p",[s._v("git checkout -b 新分支名称")])]),s._v(" "),e("li",[e("p",[s._v("git push -u origin 新分支名称")])]),s._v(" "),e("li",[e("p",[s._v("git checkout 分支名称")])]),s._v(" "),e("li",[e("p",[s._v("git branc")])])]),s._v(" "),e("h2",{attrs:{id:"更多参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多参考"}},[s._v("#")]),s._v(" 更多参考")]),s._v(" "),e("p",[s._v("更多详情参考知乎大佬的文章：https://zhuanlan.zhihu.com/p/107096362")]),s._v(" "),e("p",[s._v("一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。")]),s._v(" "),e("p",[s._v("跟多请参考阮一峰博客")]),s._v(" "),e("p",[s._v("http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html")]),s._v(" "),e("p",[e("img",{attrs:{src:a(925),alt:"img"}})]),s._v(" "),e("p",[s._v("下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("Workspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);t.default=n.exports},823:function(s,t,a){s.exports=a.p+"assets/img/20170213202127693.e6551d14.png"},892:function(s,t,a){s.exports=a.p+"assets/img/20170213202039688.7da09f8c.png"},893:function(s,t,a){s.exports=a.p+"assets/img/20170213202102209.2d194be8.png"},894:function(s,t,a){s.exports=a.p+"assets/img/image-20230918170722262.abaa2e09.png"},895:function(s,t,a){s.exports=a.p+"assets/img/image-20230918170830569.15f102b5.png"},896:function(s,t,a){s.exports=a.p+"assets/img/image-20230918180240430.86ea1039.png"},897:function(s,t,a){s.exports=a.p+"assets/img/image-20230918180412227.3dc8d195.png"},898:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181336413.c43a5eef.png"},899:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181434554.fe825ad7.png"},900:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181651300.c1e67c5d.png"},901:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181813635.c09448fa.png"},902:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181824022.4c787634.png"},903:function(s,t,a){s.exports=a.p+"assets/img/image-20230918181932778.3c847b08.png"},904:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182238504.9ecd04dc.png"},905:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182311296.41c8af2b.png"},906:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182353858.c9378dfc.png"},907:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182528182.23fad745.png"},908:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182712980.b2b801ef.png"},909:function(s,t,a){s.exports=a.p+"assets/img/image-20230918182801798.5f0e2948.png"},910:function(s,t,a){s.exports=a.p+"assets/img/image-20230918183847749.16b26045.png"},911:function(s,t,a){s.exports=a.p+"assets/img/image-20230918185433517.33973c52.png"},912:function(s,t,a){s.exports=a.p+"assets/img/image-20230918185507517.2f4673d6.png"},913:function(s,t,a){s.exports=a.p+"assets/img/image-20230918185645689.8c7b1bb6.png"},914:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190221905.4f8b3d47.png"},915:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190349808.6d10fead.png"},916:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190450797.0b1e49f5.png"},917:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190523101.e8ca26e8.png"},918:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190648339.777d55c8.png"},919:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190821440.ded2c580.png"},920:function(s,t,a){s.exports=a.p+"assets/img/image-20230918190928472.79f4277a.png"},921:function(s,t,a){s.exports=a.p+"assets/img/image-20230918191001762.77a5b560.png"},922:function(s,t,a){s.exports=a.p+"assets/img/image-20230918191143907.4bc0d533.png"},923:function(s,t,a){s.exports=a.p+"assets/img/image-20230918191258914.713f87e2.png"},924:function(s,t,a){s.exports=a.p+"assets/img/image-20230918191329418.39c18372.png"},925:function(s,t,a){s.exports=a.p+"assets/img/155108384e22610f.58f266d9.png"}}]);